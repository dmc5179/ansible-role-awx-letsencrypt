---
- name: "create the {{ ler53_cert_dir }} directory"
  file:
    path: "{{ ler53_cert_dir }}"
    state: directory
    owner: root
    mode: 0755

- name: "create the {{ ler53_account_key_dir }} directory"
  file:
    path: "{{ ler53_account_key_dir }}"
    state: directory
    owner: root
    mode: 0700

- name: generate the private key
  openssl_privatekey:
    path: "{{ ler53_cert_dir }}/{{ ler53_key_file_name }}"
    size: "{{ ler53_key_size }}"
    owner: "{{ ler53_cert_files_owner }}"
    group: "{{ ler53_cert_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"
  tags:
    - openssl

- name: check consistency of private key
  openssl_privatekey_info:
    path: "{{ ler53_cert_dir }}/{{ ler53_key_file_name }}"
  register: result_privatekey
  tags:
    - openssl

- name: generate the CSR
  openssl_csr:
    path: "{{ ler53_cert_dir }}/{{ ler53_csr_file_name }}"
    privatekey_path: "{{ ler53_cert_dir }}/{{ ler53_key_file_name }}"
    common_name: "{{ ler53_cert_common_name }}"
    key_usage: "{{ ler53_cert_key_usages }}"
    subject_alt_name: "DNS:{{ ler53_cert_common_name }}{{ ',DNS:' + ',DNS:'.join(ler53_cert_sans) if ler53_cert_sans else '' }}"
    extended_key_usage: "{{ ler53_cert_extended_key_usages | default(omit) }}"
    owner: "{{ ler53_cert_files_owner }}"
    group: "{{ ler53_cert_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"
  register: generate_csr
  tags:
    - openssl

- name: check consistency of the CSR key
  openssl_csr_info:
    path: "{{ ler53_cert_dir }}/{{ ler53_csr_file_name }}"
  register: result_csr
  tags:
    - openssl

- name: generate the Let's Encrypt account key
  openssl_privatekey:
    path: "{{ ler53_account_key_dir }}/{{ ler53_account_key_file_name }}"
    size: "{{ ler53_account_key_size }}"
    owner: "{{ ler53_cert_files_owner }}"
    group: "{{ ler53_cert_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"
  tags:
    - openssl

- name: check consistency of the account key
  openssl_privatekey_info:
    path: "{{ ler53_account_key_dir }}/{{ ler53_account_key_file_name }}"
  register: result_accountkey
  tags:
    - openssl

- name: delete existing certificate
  file:
    path: "{{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
    state: absent
  when: generate_csr.changed and ler53_new_cert_when_csr_changes
  tags:
    - openssl

- name: initiate the Let's Encrypt challenge
  acme_certificate:
    acme_version: 2
    acme_directory: "{{ ler53_acme_directory }}"
    challenge: dns-01
    account_key: "{{ ler53_account_key_dir }}/{{ ler53_account_key_file_name }}"
    csr: "{{ ler53_cert_dir }}/{{ ler53_csr_file_name }}"
    dest: "{{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
    account_email: "{{ ler53_account_email }}"
    remaining_days: "{{ ler53_cert_remaining_days_before_renewal }}"
    terms_agreed: true
  register: lets_encrypt_challenge

- name: create the DNS records for the challenge
  route53:
    command: create
    zone: "{{ ler53_route_53_domain }}"
    record: "{{ ler53_item.value['dns-01']['record'] }}"
    type: TXT
    ttl: 5
    value: "\"{{ ler53_item.value['dns-01']['resource_value'] }}\""
    aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
    aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
    overwrite: true
    wait: true
  with_dict: "{{ lets_encrypt_challenge['challenge_data'] | default({}) }}"
  loop_control:
    loop_var: ler53_item

- name: validate the Let's Encrypt challenge
  acme_certificate:
    acme_version: 2
    acme_directory: "{{ ler53_acme_directory }}"
    challenge: dns-01
    account_key: "{{ ler53_account_key_dir }}/{{ ler53_account_key_file_name }}"
    csr: "{{ ler53_cert_dir }}/{{ ler53_csr_file_name }}"
    dest: "{{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
    account_email: "{{ ler53_account_email }}"
    data: "{{ lets_encrypt_challenge }}"
  notify: handle services
  register: lets_encrypt_validation_result

- name: set the ler53_cert_changed fact
  set_fact:
    ler53_cert_changed: "{{ lets_encrypt_validation_result.changed | bool }}"

- name: delete the DNS records for the challenge
  route53:
    command: delete
    zone: "{{ ler53_route_53_domain }}"
    record: "{{ ler53_item.value['dns-01']['record'] }}"
    type: TXT
    ttl: 5
    value: "\"{{ ler53_item.value['dns-01']['resource_value'] }}\""
    aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
    aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
  with_dict: "{{ lets_encrypt_challenge['challenge_data'] | default({}) }}"
  loop_control:
    loop_var: ler53_item

- name: set the cert file permissions
  file:
    path: "{{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
    owner: "{{ ler53_cert_files_owner }}"
    group: "{{ ler53_cert_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"

- name: download the Let's Encrypt intermediate CA
  get_url:
    url: https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem
    dest: "{{ ler53_cert_dir }}/{{ ler53_intermediate_file_name }}"
    owner: "{{ ler53_cert_files_owner }}"
    group: "{{ ler53_cert_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"
  register: ler53_intermediate_download_task
  when: ler53_intermediate_download | bool

- name: get content of the certificate
  command: "cat {{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
  register: ler53_certificate_content
  changed_when: false
  when: ler53_intermediate_download | bool

- name: get content of the intermediate CA
  command: "cat {{ ler53_cert_dir }}/{{ ler53_intermediate_file_name }}"
  register: ler53_intermediate_content
  changed_when: false
  when: ler53_intermediate_download | bool

- name: create a file with the certificate and intermediate CA concatenated
  copy:
    content: "{{ ler53_certificate_content['stdout'] + '\n' + ler53_intermediate_content['stdout'] + '\n' }}"
    dest: "{{ ler53_cert_dir }}/{{ ler53_cert_and_intermediate_file_name }}"
    owner: "{{ ler53_cert_files_owner }}"
    group: "{{ ler53_cert_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"
  when: ler53_intermediate_download | bool

- name: verify the private keys and CSR
  assert:
    that:
      - result_privatekey.key_is_consistent
      - result_accountkey.key_is_consistent
      - result_csr.signature_valid
    msg: "The private keys and CSR are valid"
